<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Inspection Checklist</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18/umd/react.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone/babel.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/zod@3/dist/zod.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-hook-form@7/dist/index.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@dnd-kit/core@6/dist/dnd-kit-core.umd.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@dnd-kit/sortable@7/dist/dnd-kit-sortable.umd.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@dnd-kit/utilities@3/dist/dnd-kit-utilities.umd.js"></script>

  <style>
    * { box-sizing: border-box; }
    body { font-family: system-ui, sans-serif; margin: 0; padding: 1rem; background: #f9fafb; }
    .container { max-width: 800px; margin: 0 auto; background: white; padding: 2rem; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
    input, textarea, button { width: 100%; padding: 0.5rem; margin: 0.5rem 0; border: 1px solid #ccc; border-radius: 6px; }
    button { background: #3b82f6; color: white; cursor: pointer; font-weight: bold; }
    button:hover { background: #2563eb; }
    .item { display: flex; gap: 0.5rem; align-items: flex-start; padding: 0.75rem; background: #f3f4f6; border-radius: 8px; margin-bottom: 0.5rem; }
    .drag-handle { cursor: grab; font-size: 1.2rem; }
    .drag-handle:active { cursor: grabbing; }
    .remove { background: #ef4444; padding: 0.3rem 0.6rem; font-size: 0.8rem; }
    .export-btn { background: #10b981; margin-top: 1rem; }
  </style>
</head>
<body>
  <div id="root"></div>

  <script type="text/babel">
    const { useForm, useFieldArray, Controller } = ReactHookForm;
    const { z } = zod;
    const { DndContext, closestCenter, useSensor, useSensors, PointerSensor, KeyboardSensor } = DndKitCore;
    const { SortableContext, arrayMove, verticalListSortingStrategy } = DndKitSortable;
    const { useSortable } = DndKitSortable;
    const { CSS } = DndKitUtilities;

    const itemSchema = z.object({
      id: z.string(),
      description: z.string().min(1, "Requis"),
      checked: z.boolean(),
      notes: z.string().optional(),
    });

    const formSchema = z.object({
      title: z.string().min(1, "Titre requis"),
      items: z.array(itemSchema).min(1, "Au moins 1 item"),
    });

    function SortableItem({ id, children }) {
      const { attributes, listeners, setNodeRef, transform, isDragging } = useSortable({ id });
      const style = { transform: CSS.Transform.toString(transform), opacity: isDragging ? 0.5 : 1 };
      return (
        <div ref={setNodeRef} style={style} className="item">
          <div {...attributes} {...listeners} className="drag-handle">Menu</div>
          {children}
        </div>
      );
    }

    function App() {
      const { register, control, handleSubmit, formState: { errors }, getValues } = useForm({
        resolver: async (data) => {
          try { formSchema.parse(data); return { values: data, errors: {} }; }
          catch (e) { return { values: {}, errors: e.formErrors.fieldErrors }; }
        },
        defaultValues: { title: "", items: [{ id: Date.now() + "", description: "", checked: false, notes: "" }] }
      });

      const { fields, append, remove, swap } = useFieldArray({ control, name: "items" });
      const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor));

      const onDragEnd = (e) => {
        const { active, over } = e;
        if (!over || active.id === over.id) return;
        const oldIdx = fields.findIndex(i => i.id === active.id);
        const newIdx = fields.findIndex(i => i.id === over.id);
        swap(oldIdx, newIdx);
      };

      const exportJSON = () => {
        const data = getValues();
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url; a.download = `${data.title || 'checklist'}.json`; a.click();
      };

      return (
        <div className="container">
          <h1>Inspection Checklist</h1>
          <form onSubmit={handleSubmit(() => alert("SauvegardÃ© !"))}>
            <input placeholder="Titre de la checklist" {...register("title")} />
            {errors.title && <p style={{color: 'red'}}>{errors.title.message}</p>}

            <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={onDragEnd}>
              <SortableContext items={fields.map(f => f.id)} strategy={verticalListSortingStrategy}>
                {fields.map((field, i) => (
                  <SortableItem key={field.id} id={field.id}>
                    <input type="checkbox" {...register(`items.${i}.checked`)} />
                    <div style={{flex: 1}}>
                      <input placeholder="Description" {...register(`items.${i}.description`)} />
                      {errors.items?.[i]?.description && <p style={{color: 'red', fontSize: '0.8rem'}}>{errors.items[i].description.message}</p>}
                      <textarea placeholder="Notes (optionnel)" {...register(`items.${i}.notes`)} rows="1" />
                    </div>
                    <button type="button" className="remove" onClick={() => remove(i)} disabled={fields.length === 1}>X</button>
                  </SortableItem>
                ))}
              </SortableContext>
            </DndContext>

            <button type="button" onClick={() => append({ id: Date.now() + "", description: "", checked: false, notes: "" })}>
              + Ajouter un item
            </button>

            <button type="submit" style={{background: '#8b5cf6'}}>Sauvegarder</button>
            <button type="button" className="export-btn" onClick={exportJSON}>Exporter JSON</button>
          </form>
        </div>
      );
    }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<App />);
  </script>
</body>
</html>
